close all; 
clc;
format short;

f = @(x) frosenbrock(x);
itmax=1000;

n = 2;
x0 = ones(n,1);
%Generamos X0
for i=1:n
       if mod(i,2)~=0
           x0(i)=-1.2;
       end
end

%Calculamos el numero de iteraciones para cada metodo
[xrcSR1, iterrcSR1] = rcSR1(f,x0,itmax);
[xlsBFGS, iterlsBFGS] = lsBFGS(f,x0,itmax);


fprintf('\n\t\t%s \t\t\t%s\n' ,'Metodo', 'Iteraciones');
fprintf('\t___________________________________\n');
fprintf('\t%s \t\t\t%d\n' ,'Punto Cauchy', iterRC1);
fprintf('\t%s \t\t\t%d\n' ,'Punto Dog-Leg', iterRC2);
fprintf('\t___________________________________\n\n\n');

%Obtenemos las ultimas 8 iteraciones de RC1
RC1=zeros(8,6);
i=1;

for j=iterRC1-7:iterRC1
    [x,msg,iter]=mRC1(@(x) ((1)+(((x(1,1)+x(2,1)+1)^2)*((19)+(-14*x(1,1))+(3*x(1,1)*x(1,1))+(-14*x(2,1))+(6*x(1,1)*x(2,1))+(3*x(2,1)*x(2,1)))))*((30)+((((2*x(1,1))+(-3*x(2,1)))^2)*((18)+(-32*x(1,1))+(12*x(1,1)*x(1,1))+(48*x(2,1))+(-36*x(1,1)*x(2,1))+(27*x(2,1)*x(2,1))))),x0,j);
    RC1(i,1)=j;
    RC1(i,2)=x(1,1);
    RC1(i,3)=x(2,1);
    RC1(i,4)=((1)+(((x(1,1)+x(2,1)+1)^2)*((19)+(-14*x(1,1))+(3*x(1,1)*x(1,1))+(-14*x(2,1))+(6*x(1,1)*x(2,1))+(3*x(2,1)*x(2,1)))))*((30)+((((2*x(1,1))+(-3*x(2,1)))^2)*((18)+(-32*x(1,1))+(12*x(1,1)*x(1,1))+(48*x(2,1))+(-36*x(1,1)*x(2,1))+(27*x(2,1)*x(2,1)))));
    RC1(i,5)= norm(apGrad(@(x) ((1)+(((x(1,1)+x(2,1)+1)^2)*((19)+(-14*x(1,1))+(3*x(1,1)*x(1,1))+(-14*x(2,1))+(6*x(1,1)*x(2,1))+(3*x(2,1)*x(2,1)))))*((30)+((((2*x(1,1))+(-3*x(2,1)))^2)*((18)+(-32*x(1,1))+(12*x(1,1)*x(1,1))+(48*x(2,1))+(-36*x(1,1)*x(2,1))+(27*x(2,1)*x(2,1))))),x));
    RC1(i,6)=norm(xmin-x);
    i=i+1;
end

%Obtenemos las ultimas 8 iteraciones de RC2
RC2=zeros(8,6);
i=1;

for j=iterRC2-7:iterRC2
    [x,msg,iter]=mRC2(@(x) ((1)+(((x(1,1)+x(2,1)+1)^2)*((19)+(-14*x(1,1))+(3*x(1,1)*x(1,1))+(-14*x(2,1))+(6*x(1,1)*x(2,1))+(3*x(2,1)*x(2,1)))))*((30)+((((2*x(1,1))+(-3*x(2,1)))^2)*((18)+(-32*x(1,1))+(12*x(1,1)*x(1,1))+(48*x(2,1))+(-36*x(1,1)*x(2,1))+(27*x(2,1)*x(2,1))))),x0,j);
    RC2(i,1)=j;
    RC2(i,2)=x(1,1);
    RC2(i,3)=x(2,1);
    RC2(i,4)=((1)+(((x(1,1)+x(2,1)+1)^2)*((19)+(-14*x(1,1))+(3*x(1,1)*x(1,1))+(-14*x(2,1))+(6*x(1,1)*x(2,1))+(3*x(2,1)*x(2,1)))))*((30)+((((2*x(1,1))+(-3*x(2,1)))^2)*((18)+(-32*x(1,1))+(12*x(1,1)*x(1,1))+(48*x(2,1))+(-36*x(1,1)*x(2,1))+(27*x(2,1)*x(2,1)))));
    RC2(i,5)= norm(apGrad(@(x) ((1)+(((x(1,1)+x(2,1)+1)^2)*((19)+(-14*x(1,1))+(3*x(1,1)*x(1,1))+(-14*x(2,1))+(6*x(1,1)*x(2,1))+(3*x(2,1)*x(2,1)))))*((30)+((((2*x(1,1))+(-3*x(2,1)))^2)*((18)+(-32*x(1,1))+(12*x(1,1)*x(1,1))+(48*x(2,1))+(-36*x(1,1)*x(2,1))+(27*x(2,1)*x(2,1))))),x));
    RC2(i,6)=norm(xmin-x);
    i=i+1;
end

%Construimos la tala para RC1 y RC2
fprintf('\t\t\t\t\t\t\t\t\t\t\t\t\t\t%s\n\n' ,'Metodo RC1');
fprintf('\t\t%s \t\t\t\t\t\t%s \t\t\t\t\t\t\t%s \t\t\t%s \t\t%s\n' ,'Iteracion', 'x', 'f(x)', 'Norma gradiente','Error');
fprintf('\t___________________________________________________________________________________________________________________\n');
for i=1:8
fprintf('\n\t\t\t%d \t\t\t%s %d %s %d %s \t\t%d \t\t%d \t\t\t%.4d', RC1(i,1),'(',RC1(i,2),',',RC1(i,3),')',RC1(i,4),RC1(i,5),RC1(i,6));
end
fprintf('\n\t___________________________________________________________________________________________________________________\n');
fprintf('\n\n\n');

fprintf('\t\t\t\t\t\t\t\t\t\t\t\t\t\t%s\n\n' ,'Metodo RC2');
fprintf('\t\t%s \t\t\t\t\t\t%s \t\t\t\t\t\t\t%s \t\t\t%s \t\t%s\n' ,'Iteracion', 'x', 'f(x)', 'Norma gradiente','Error');
fprintf('\t___________________________________________________________________________________________________________________\n');
for i=1:8
fprintf('\n\t\t\t%d \t\t\t%s %d %s %d %s \t\t%d \t\t%d \t\t\t%.4d', RC2(i,1),'(',RC2(i,2),',',RC2(i,3),')',RC2(i,4),RC2(i,5),RC2(i,6));
end
fprintf('\n\t___________________________________________________________________________________________________________________\n');



















